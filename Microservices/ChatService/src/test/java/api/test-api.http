### Get the base URL
GET {{baseUrl}}

// !!! Make sure to replace token in http-client.env.json with a valid token !!!
// A valid token will be generated and printed in the console every time the application starts.

### Seed the database with the specified number of messages. Takes a query parameter `count` to specify the number of messages to seed. If no count is provided, it defaults to 50.
GET {{baseUrl}}/messages/seed?count=7
Authorization: Bearer {{token}}

### Get All Messages
GET {{baseUrl}}/messages
Authorization: Bearer {{token}}


### Get a message by id (replace {id} with an actual ID)
GET {{baseUrl}}/messages/{id}
Authorization: Bearer {{token}}


### Create a new message
POST {{baseUrl}}/messages
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "receiverId": "cca07896-caf9-42b4-9db4-57ea899cab7a",
  "content": "Hello, how are you?",
  "type": "TEXT"
}

### Update an existing message (replace {id} with an actual ID)
PATCH{{baseUrl}}/messages/{id}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "Updated Content",
  "status": "FAILED",
  "type": "PRODUCT"
}

### Delete a message (replace {id} with an actual ID)
DELETE {{baseUrl}}/messages/{id}
Authorization: Bearer {{token}}

### Check if a message is seen (replace {id} with an actual ID)
GET {{baseUrl}}/messages/{id}/seen
Authorization: Bearer {{token}}

### Set a message as seen (replace {id} with an actual ID)
PATCH {{baseUrl}}/messages/{id}/seen
Authorization: Bearer {{token}}

### Delete all messages
DELETE {{baseUrl}}/messages
Authorization: Bearer {{token}}

